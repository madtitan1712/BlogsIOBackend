# Name of your workflow
name: Deploy Backend to Elastic Beanstalk

# This tells GitHub to run the workflow on every push to the 'main' branch
on:
  push:
    branches: [ "main" ] # Change this if your main branch is called 'master'

jobs:
  # Job 1: Build the Docker image and push it to Docker Hub
  build-and-push:
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner
    steps:
      # 1. Get your code from the repository
      - name: Check out code
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 3. Build the Docker image
      # This uses the Dockerfile from your repo
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/blogsio-backend:latest .

      # 4. Push the Docker image
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/blogsio-backend:latest

  # Job 2: Deploy the new image to Elastic Beanstalk
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # This ensures Job 2 only runs if Job 1 succeeds
    steps:
      # 1. Get your code (we need the Dockerrun.aws.json file)
      - name: Check out code
        uses: actions/checkout@v4

      # 2. Configure the AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Deploy to Elastic Beanstalk
      # This action re-uploads your Dockerrun.aws.json file,
      # which tells Beanstalk to pull the new 'latest' image from Docker Hub.
      - name: Deploy to Elastic Beanstalk
        uses: heinport/beanstalk-deploy@v21
        with:
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: "v${{ github.sha }}" # Create a unique version label from the commit hash
          region: ${{ secrets.AWS_REGION }}
          deployment_package: "Dockerrun.aws.json" # The file that triggers the Docker pull
          use_existing_version_if_available: false